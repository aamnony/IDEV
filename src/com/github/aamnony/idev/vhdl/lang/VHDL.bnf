{
    parserClass="com.github.aamnony.idev.vhdl.lang.VhdlParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Vhdl"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.aamnony.idev.vhdl.lang"
    psiImplPackage="com.github.aamnony.idev.vhdl.lang.impl"

    psiImplUtilClass="com.github.aamnony.idev.vhdl.lang.VhdlPsiImplUtil"

    elementTypeHolderClass="com.github.aamnony.idev.vhdl.lang.VhdlTypes"
    elementTypeClass="com.github.aamnony.idev.vhdl.lang.VhdlElementType"
    tokenTypeClass="com.github.aamnony.idev.vhdl.lang.VhdlTokenType"

    tokens =
    [
        /* Keywords */
        /* Statements */
        T_ASSERT="ASSERT"
        T_SEVERITY="SEVERITY"
        T_REPORT="REPORT"

        T_NULL="NULL"

        T_IF="IF"
        T_THEN="THEN"
        T_ELSIF="ELSIF"
        T_ELSE="ELSE"

        T_FOR="FOR"
        T_WHILE="WHILE"
        T_LOOP="LOOP"
        T_NEXT="NEXT"
        T_EXIT="EXIT"

        T_GENERATE="GENERATE"

        T_SELECT="SELECT"
        T_WITH="WITH"

        T_CASE="CASE"
        T_WHEN="WHEN"

        T_UNAFFECTED="UNAFFECTED"

        /* Design Units */
        T_LIBRARY="LIBRARY"
        T_USE="USE"
        T_ALL="ALL"

        T_ARCHITECTURE="ARCHITECTURE"
        T_CONFIGURATION="CONFIGURATION"
        T_ENTITY="ENTITY"

        T_POSTPONED="POSTPONED"
        T_PROCESS="PROCESS"

        T_PACKAGE="PACKAGE"
        T_BODY="BODY"

        T_DISCONNECT="DISCONNECT"
        T_GUARDED="GUARDED"
        T_BLOCK="BLOCK"

        T_COMPONENT="COMPONENT"

        T_FUNCTION="FUNCTION"
        T_IMPURE="IMPURE"
        T_PURE="PURE"
        T_PROCEDURE="PROCEDURE"
        T_RETURN="RETURN"

        /* Port directions */
        T_BUFFER="BUFFER"
        T_IN="IN"
        T_INOUT="INOUT"
        T_LINKAGE="LINKAGE"
        T_OUT="OUT"

        /* Declarations  */
        T_ARRAY="ARRAY"
        T_ACCESS="ACCESS"
        T_CONSTANT="CONSTANT"
        T_FILE="FILE"
        T_NEW="NEW"
        T_SIGNAL="SIGNAL"
        T_SHARED="SHARED"
        T_SUBTYPE="SUBTYPE"
        T_RANGE="RANGE"
        T_RECORD="RECORD"
        T_TYPE="TYPE"
        T_UNITS="UNITS"
        T_OTHERS="OTHERS"
        T_DOWNTO="DOWNTO"
        T_TO="TO"
        T_VARIABLE="VARIABLE"

        T_GENERIC="GENERIC"
        T_PORT="PORT"
        T_MAP="MAP"
        T_OPEN="OPEN"

        T_ATTRIBUTE="ATTRIBUTE"
        T_ALIAS="ALIAS"
        T_LABEL="LABEL"

        T_BUS="BUS"
        T_REGISTER="REGISTER"

        T_GROUP="GROUP"
        T_LITERAL="LITERAL"

        /* Operators */
        T_LEFT_PAREN="("
        T_RIGHT_PAREN=")"
        T_LEFT_BRACKET="["
        T_RIGHT_BRACKET="]"
        T_SEMICOLON=";"
        T_COLON=":"
        T_DOT="."
        T_COMMA=","
        T_APOSTROPHE="'"
        T_CASE_OR="|"
        T_EXP="**"
        T_MUL="*"
        T_DIV="/"
        T_ADD="+"
        T_SUB="-"
        T_CONCAT="&"
        T_EQ="="
        T_NE="/="
        T_LT="<"
        T_LE="<="
        T_GT=">"
        T_GE=">="

//      T_NON_BLOCKING_ASSIGNMENT="<="
        T_BLOCKING_ASSIGNMENT=":="
        T_MAP_ASSIGNMENT="=>"

        T_ABS="ABS"
        T_AND="AND"
        T_MOD="MOD"
        T_NAND="NAND"
        T_NOR="NOR"
        T_NOT="NOT"
        T_OR="OR"
        T_REM="REM"
        T_ROL="ROL"
        T_ROR="ROR"
        T_SLA="SLA"
        T_SLL="SLL"
        T_SRA="SRA"
        T_SRL="SRL"
        T_XNOR="XNOR"
        T_XOR="XOR"

        /* VHDL 2008 Operators */
        T_QQ="??"
        T_QE="?="
        T_QNE="?/="
        T_QLT="?<"
        T_QLE="?<="
        T_QGT="?>"
        T_QGE="?>="

        /* Delay statements */
        T_AFTER="AFTER"
        T_INERTIAL="INERTIAL"
        T_REJECT="REJECT"
        T_TRANSPORT="TRANSPORT"
        T_UNTIL="UNTIL"
        T_WAIT="WAIT"

        /* Misc. */
        T_BEGIN="BEGIN"
        T_END="END"
        T_IS="IS"
        T_OF="OF"
        T_ON="ON"
        T_REVERSE_RANGE="REVERSE_RANGE"

        /* Non-VHDL specific keywords */
        ID='ID'
        BINLIT='BINLIT'
        OCTLIT='OCTLIT'
        HEXLIT='HEXLIT'

        STRLIT='STRLIT'
        CHRLIT='CHRLIT'
        COMMENT='COMMENT'
        REALLIT='REALLIT'
        EXID='EXID'
        BITLIT='BITLIT'
        EXDIGIT='EXDIGIT'
    ]
}

design_file ::= design_unit ( design_unit )*

access_type_definition ::= 'access' subtype_indication

actual_designator ::=
    expression
    | refname
    | 'open'

actual_parameter_part ::= association_list

actual_part ::=
    actual_designator
    | refname '(' actual_designator ')'
    | type_mark '(' actual_designator ')'

private adding_operator ::= '+' | '-' | '&'

aggregate ::= '(' element_association ( ',' element_association )* ')'

alias_declaration ::= 'alias' alias_designator [ ':' subtype_indication ] 'is' refname signature? ';'

private alias_designator ::= identifier | character_literal | operator_symbol

allocator ::=
    'new' subtype_indication
    | 'new' qualified_expression

architecture_body ::=
    'architecture' identifier 'of' refname 'is'
        architecture_declarative_part
    'begin'
        architecture_statement_part
    'end' [ 'architecture' ] [ identifier ] ';'
{
    methods=[getPresentation getIcon getType]
    pin=1
}

architecture_declarative_part ::= ( declarative_item )*

architecture_statement_part ::= ( concurrent_statement )*

array_type_definition ::= unconstrained_array_definition | constrained_array_definition

assertion ::=
    'assert' condition
        [ 'report' expression ]
        [ 'severity' expression ]
{
    pin=1
}

assertion_statement ::= [ label ':' ] assertion ';'

association_element ::= [ formal_part '=>' ] actual_part

association_list ::= association_element ( ',' association_element )*

attribute_declaration ::= 'attribute' identifier ':' type_mark ';'
{
    pin=3
}

private attribute_designator ::= identifier | range_type

attribute_name ::= suffix [ '(' actual_parameter_part ')' ] signature? "'" attribute_designator [ '(' expression ')' ]

attribute_specification ::= 'attribute' attribute_designator 'of' entity_specification 'is' expression ';'
{
    pin=2
}

base_unit_declaration ::= identifier ';'

binding_indication ::=
    [ 'use' entity_aspect ]
    [ generic_map_aspect ]
    [ port_map_aspect ]

bit_string_literal ::= binlit | octlit | hexlit

block_configuration ::=
    'for' block_specification
        ( use_clause )*
        ( configuration_item )*
    'end' 'for' ';'

block_declarative_part ::= ( declarative_item )*

block_header ::=
    [ generic_clause
    [ generic_map_aspect ';' ] ]
    [ port_clause
    [ port_map_aspect ';' ] ]

block_specification ::=
    refname
    | label
    | label [ '(' index_specification ')' ]

block_statement ::=
    label ':'
        'block' [ '(' expression ')' ] [ 'is' ]
            block_header
            block_declarative_part
        'begin'
            block_statement_part
        'end' 'block' [ label ] ';'
{
    methods=[getPresentation getIcon getType]
    pin=3
}

block_statement_part ::= ( concurrent_statement )*

case_statement ::=
    [ label ':' ]
        'case' expression 'is'
            case_statement_alternative
            ( case_statement_alternative )*
        'end' 'case'[ label ] ';'
{
    pin=2
}

case_statement_alternative ::=
    'when' choices '=>'
        sequence_of_statements

character_literal ::= chrlit

choice ::=
    relation
    | discrete_range
    | simple_expression
    | identifier
    | 'others'

choices ::= choice ( '|' choice )*

component_configuration ::=
    'for' component_specification
        [ binding_indication ';' ]
        [ block_configuration ]
    'end' 'for' ';'

component_declaration ::=
    'component' identifier [ 'is' ]
        entity_header
    'end' 'component' identifier? ';'
{
    methods=[getPresentation getIcon getType]
    pin=1
}

component_instantiation_map ::= generic_map_aspect? port_map_aspect?

component_instantiation_statement ::=
    label ':' instantiated_unit
        component_instantiation_map ';'
{
    methods=[getPresentation getIcon getType]
//    pin=3
}

component_specification ::= instantiation_list ':' refname

private composite_type_definition ::= array_type_definition | record_type_definition

concurrent_assertion_statement ::= [ label ':' ] [ 'postponed' ] assertion ';'

concurrent_procedure_call_statement ::= [ label ':' ] [ 'postponed' ] procedure_call ';'

concurrent_signal_assignment_statement ::=
      [ label ':' ] [ 'postponed' ] conditional_signal_assignment
    | [ label ':' ] [ 'postponed' ] selected_signal_assignment

private concurrent_statement ::=
    block_statement
    | process_statement
    | concurrent_procedure_call_statement
    | concurrent_assertion_statement
    | concurrent_signal_assignment_statement
    | component_instantiation_statement
    | generate_statement

condition ::= expression

condition_clause ::= 'until' condition

private conditional_signal_assignment ::= target '<=' options conditional_waveforms ';'
{
    pin(".*")=2
}

conditional_waveforms ::=
    ( waveform 'when' condition 'else' )*
    waveform [ 'when' condition ]

configuration_declaration ::=
    'configuration' identifier 'of' refname 'is'
        configuration_declarative_part
        block_configuration
    'end' [ 'configuration' ] identifier? ';'

configuration_declarative_item ::=
    use_clause
    | attribute_specification
    | group_declaration

configuration_declarative_part ::= ( configuration_declarative_item )*

configuration_item ::= block_configuration | component_configuration

configuration_specification ::= 'for' component_specification binding_indication ';'

constant_declaration ::=
    'constant' identifier_list ':' subtype_indication [ ':=' expression ] ';'
{
    methods=[getPresentation getIcon getType]
    pin=1
}

constrained_array_definition ::= 'array' index_constraint 'of' subtype_indication

constraint ::= range_constraint | index_constraint

context_clause ::= ( context_item )*

private context_item ::= library_clause | use_clause

private declarative_item ::=
    subprogram_declaration
    | subprogram_body
    | type_declaration
    | subtype_declaration
    | constant_declaration
    | signal_declaration
    | variable_declaration
    | file_declaration
    | alias_declaration
    | component_declaration
    | attribute_declaration
    | attribute_specification
    | configuration_specification
    | disconnection_specification
    | use_clause
    | group_template_declaration
    | group_declaration

delay_mechanism ::=
    'transport'
    | [ 'reject' expression ] 'inertial'

private design_unit ::= context_clause library_unit

designator ::= identifier | operator_symbol

direction ::= 'to' | 'downto'

disconnection_specification ::= 'disconnect' guarded_signal_specification 'after' expression ';'

discrete_range ::= range

element_association ::= [ choices '=>' ] expression

element_declaration ::= identifier_list ':' element_subtype_definition ';'

element_subtype_definition ::= subtype_indication

entity_aspect ::=
      'entity' refname [ '(' identifier ')' ]
    | 'configuration' refname
    | 'open'

private entity_class ::=
    'entity'      | 'architecture' | 'configuration' | 'procedure' | 'function' | 'package'
    | 'type'      | 'subtype'      | 'constant'      | 'signal'    | 'variable' | 'component'
    | 'label'     | 'literal'      | 'units'         | 'group'     | 'file'

entity_class_entry ::= entity_class [ '<>' ]

entity_class_entry_list ::= entity_class_entry ( ',' entity_class_entry )*

entity_declaration ::=
    'entity' identifier 'is'
        entity_header
    'end' [ 'entity' ] identifier? ';'
{
    methods=[getPresentation getIcon getType]
    pin=1
}

entity_designator ::= entity_tag signature?

entity_header ::= generic_clause? port_clause?

entity_name_list ::=
    entity_designator ( ',' entity_designator )*
    | 'others'
    | 'all'

entity_specification ::= entity_name_list ':' entity_class

private entity_tag ::=
    identifier
    | character_literal
    | operator_symbol

enumeration_list ::= enumeration_literal ( ',' enumeration_literal )*

enumeration_literal ::=
    identifier
    | character_literal

enumeration_type_definition ::= '(' enumeration_list ')'

exit_statement ::= [ label ':' ] 'exit' [ label ] [ 'when' condition ] ';'

expression ::=
      relation ( 'and' relation )+
    | relation ( 'or' relation )+
    | relation ( 'xor' relation )+
    | relation ( 'xnor' relation )+
    | relation 'nand' relation
    | relation 'nor' relation
    | relation
    | discrete_range
    | 'open'

factor ::=
    primary [ '**' primary ]
    | 'abs' primary
    | 'not' primary

file_declaration ::= 'file' identifier_list ':' subtype_indication file_open_information ';'

file_logical_name ::= expression

file_open_information ::= [ 'open' expression ] 'is' file_logical_name

file_type_definition ::= 'file' 'of' type_mark

formal_designator ::= refname

formal_part ::=
    formal_designator
    | refname '(' formal_designator ')'
    | type_mark '(' formal_designator ')'

full_type_declaration ::= 'type' identifier 'is' type_definition ';'

function_parameter_constant_declaration ::=
    [ 'constant' ] identifier_list ':' [ 'in' ]  // Either in+constant/constant/in/nothing.
    subtype_indication [ ':=' expression ]

function_parameter_signal_declaration ::=
    'signal' identifier_list ':' [ 'in' ]  // Either in+signal/signal
    subtype_indication [ 'bus' ] [ ':=' expression ]

private function_parameter_declaration ::=
    function_parameter_constant_declaration
    | function_parameter_signal_declaration
    | subprogram_parameter_file_declaration

function_parameter_list ::= function_parameter_declaration ( ';' function_parameter_declaration )*

generate_statement_part ::= ( concurrent_statement )*

generate_declarative_part ::= ( declarative_item )*

generate_statement ::=
    label ':'
        generation_scheme 'generate'
            [ generate_declarative_part
        'begin' ]
            generate_statement_part
        'end' 'generate' [ label ] ';'
{
    methods=[getPresentation getIcon getType]
    pin=4
}

generation_scheme ::=
    'for' parameter_specification
    | 'if' condition

generic_clause ::= 'generic' '(' generic_interface_list ')' ';'

generic_interface_list ::= interface_generic_declaration ( ';' interface_generic_declaration )*

generic_map_aspect ::= 'generic' 'map' '(' map_list ')'

group_constituent ::= refname | character_literal

group_constituent_list ::= group_constituent ( ',' group_constituent )*

group_template_declaration ::= 'group' identifier 'is' '(' entity_class_entry_list ')' ';'

group_declaration ::= 'group' identifier ':' refname '(' group_constituent_list ')' ';'

guarded_signal_specification ::= signal_list ':' type_mark

identifier ::= ID
{
    mixin="com.github.aamnony.idev.vhdl.lang.VhdlNamedElementImpl"
    implements="com.github.aamnony.idev.vhdl.lang.VhdlNamedElement"

    methods=[setName getName getNameIdentifier getReferences getPresentation isDeclared getScopes getIcon getType]
}

identifier_list ::= identifier ( ',' identifier )*
{
    pin=1
}

if_statement ::=
    [ label ':' ]
        'if' condition 'then'
            sequence_of_statements
        ( 'elsif' condition 'then'
            sequence_of_statements )*
        [ 'else'
            sequence_of_statements ]
        'end' 'if' [ label ] ';'
{
    pin=2
}

incomplete_type_declaration ::= 'type' identifier ';'

index_constraint ::= '(' discrete_range ( ',' discrete_range )* ')'

index_specification ::=
    discrete_range
    | expression

index_subtype_definition ::= type_mark [ 'range' '<>' ]

indexed_name ::= suffix aggregate

instantiated_unit ::=
    [ 'component' ] selected_name
    | 'entity' selected_name [ '(' identifier ')' ]
    | 'configuration' selected_name

instantiation_list ::=
    label ( ',' label )*
    | 'others'
    | 'all'

interface_generic_declaration ::= identifier_list ':' subtype_indication [ ':=' expression ]
{
    methods=[getPresentation getIcon getType]
}

interface_port_declaration ::= identifier_list ':' mode subtype_indication [ ':=' expression ]
{
    methods=[getPresentation getIcon getType]
}

iteration_scheme ::=
    'while' condition
    | 'for' parameter_specification

label ::= identifier

library_clause ::= 'library' logical_name_list ';'
{
    pin=1
}

private library_unit ::=
    primary_unit
    | secondary_unit

private literal ::=
    reallit
    | enumeration_literal
    | string_literal
    | bit_string_literal
    | character_literal
    | 'null'

logical_name ::= identifier

logical_name_list ::= logical_name ( ',' logical_name )*

loop_statement ::=
    [ label ':' ]
        [ iteration_scheme ] 'loop'
            sequence_of_statements
        'end' 'loop' [ label ] ';'
{
    pin=3
}

map_list ::= element_association ( ',' element_association )*

mode ::= mode_simple | 'buffer' | 'linkage'

private mode_simple ::= 'in' | 'out' | 'inout'

private multiplying_operator ::= '*' | '/' | 'mod' | 'rem'

refname ::=
    operator_symbol
    | indexed_name
    | slice_name
    | attribute_name
    | identifier

next_statement ::= [ label ':' ] 'next' [ label ] [ 'when' condition ] ';'

null_statement ::= [ label ':' ] 'null' ';'

operator_symbol ::= string_literal

options ::= [ 'guarded' ] [ delay_mechanism ]

package_body ::=
    'package' 'body' identifier 'is'
        package_body_declarative_part
    'end' [ 'package' 'body' ] identifier? ';'
{
    methods=[getPresentation getIcon getType]
//    pin=2
}

private package_body_declarative_item ::=
    subprogram_declaration
    | subprogram_body
    | type_declaration
    | subtype_declaration
    | constant_declaration
    | variable_declaration
    | file_declaration
    | alias_declaration
    | use_clause
    | group_template_declaration
    | group_declaration

package_body_declarative_part ::= ( package_body_declarative_item )*

package_declaration ::=
    'package' identifier 'is'
        package_declarative_part
    'end' [ 'package' ] identifier? ';'
{
    methods=[getPresentation getIcon getType]
//    pin=1
}

private package_declarative_item ::=
    subprogram_declaration
    | type_declaration
    | subtype_declaration
    | constant_declaration
    | signal_declaration
    | variable_declaration
    | file_declaration
    | alias_declaration
    | component_declaration
    | attribute_declaration
    | attribute_specification
    | disconnection_specification
    | use_clause
    | group_template_declaration
    | group_declaration

package_declarative_part ::= ( package_declarative_item )*

parameter_specification ::= identifier 'in' discrete_range

physical_type_definition ::=
    range_constraint
        ( 'units'
              base_unit_declaration
              ( secondary_unit_declaration )*
          'end' 'units' identifier? )?

port_clause ::= 'port' '(' port_interface_list ')' ';'

port_interface_list ::= interface_port_declaration ( ';' interface_port_declaration )*

port_map_aspect ::= 'port' 'map' '(' map_list ')'

private primary ::=
    refname ( '.' refname )*
    | literal
    | qualified_expression
    | type_conversion
    | allocator
    | '(' expression ')'
    | aggregate

private primary_unit ::=
    entity_declaration
    | configuration_declaration
    | package_declaration

private procedure_call ::= indexed_name

procedure_call_statement ::= [ label ':' ] procedure_call ';'

procedure_parameter_constant_declaration ::=
    [ 'constant' ] identifier_list ':' [ 'in' ]
    subtype_indication [ ':=' expression ]

procedure_parameter_signal_declaration ::=
    'signal' identifier_list ':' mode_simple
    subtype_indication [ 'bus' ] [ ':=' expression ]

procedure_parameter_variable_declaration ::=
    [ 'variable' ] identifier_list ':' mode_simple
    subtype_indication [ ':=' expression ]

private procedure_parameter_declaration ::=
    procedure_parameter_variable_declaration
    | procedure_parameter_constant_declaration
    | procedure_parameter_signal_declaration
    | subprogram_parameter_file_declaration

procedure_parameter_list ::= procedure_parameter_declaration ( ';' procedure_parameter_declaration )*

private process_declarative_item ::=
    subprogram_declaration
    | subprogram_body
    | type_declaration
    | subtype_declaration
    | constant_declaration
    | variable_declaration
    | file_declaration
    | alias_declaration
    | attribute_declaration
    | attribute_specification
    | use_clause
    | group_template_declaration
    | group_declaration

process_declarative_part ::= ( process_declarative_item )+

process_statement ::=
    [ label ':' ]
        [ 'postponed' ] 'process' [ '(' sensitivity_list ')' ] [ 'is'
            process_declarative_part? ]
        'begin'
            sequence_of_statements
        'end' [ 'postponed' ] 'process' [ label ] ';'
{
    methods=[getPresentation getIcon getType]
    pin=3
}

qualified_expression ::=
    type_mark "'" '(' expression ')'
    | type_mark "'" aggregate

range ::=
    simple_expression direction simple_expression
    | attribute_name
    | identifier

range_constraint ::= 'range' range

range_type ::= 'range' | 'reverse_range'

private record_type_definition ::=
    'record'
        ( element_declaration )+
    'end' 'record' [ identifier ]

relation ::= shift_expression [ relational_operator shift_expression ]

private relational_operator ::=
    '=' | '/=' | '<' | '<=' | '>' | '>=' |
    '??' | '?=' | '?/=' | '?<' | '?<=' | '?>' | '?>=' // VHDL 2008 Operators

report_statement ::=
    [ label ':' ]
        'report' expression
            [ 'severity' expression ] ';'

resolution_function ::= 'resolved' | '(' 'resolved' ')'

return_statement ::= [ label ':' ] 'return' [ expression ] ';'

scalar_type_definition ::= enumeration_type_definition | physical_type_definition

private secondary_unit ::=
    architecture_body
    | package_body

secondary_unit_declaration ::= identifier '=' reallit ';'

selected_name ::= identifier ( '.' suffix )*
{
    pin=1
}

private selected_signal_assignment ::=
    'with' expression 'select'
        target '<=' options selected_waveforms ';'

selected_waveforms ::=
    ( waveform 'when' choices ',' )*
    waveform 'when' choices

sensitivity_clause ::= 'on' sensitivity_list

sensitivity_list ::= refname ( ',' refname )*

sequence_of_statements ::= ( sequential_statement )*

private sequential_statement ::=
    wait_statement
    | assertion_statement
    | report_statement
    | signal_assignment_statement
    | variable_assignment_statement
    | procedure_call_statement
    | if_statement
    | case_statement
    | loop_statement
    | next_statement
    | exit_statement
    | return_statement
    | null_statement

shift_expression ::= simple_expression [ shift_operator simple_expression ]

private shift_operator ::= 'sll' | 'srl' | 'sla' | 'sra' | 'rol' | 'ror'

private sign ::= '+' | '-'

signal_assignment_statement ::= [ label ':' ] target '<=' [ delay_mechanism ] waveform ';'
{
    pin(".*")=3
}

signal_declaration ::= 'signal' identifier_list ':' subtype_indication [ signal_kind ] [ ':=' expression ] ';'
{
    methods=[getPresentation getIcon getType]
    pin=1
}

signal_kind ::= 'register' | 'bus'

signal_list ::=
    refname ( ',' refname )*
    | 'others'
    | 'all'

signature ::= '[' [ type_mark ( ',' type_mark )* ] [ 'return' type_mark ] ']'

simple_expression ::= [ sign ] term ( adding_operator term )*

slice_name ::= identifier [ '(' actual_parameter_part ')' ] '(' discrete_range ')'

string_literal ::= strlit

subprogram_body ::=
    subprogram_specification 'is'
        subprogram_declarative_part?
    'begin'
        sequence_of_statements
    'end' [ subprogram_kind ] [ designator ] ';'

subprogram_declaration ::= subprogram_specification ';'

private subprogram_declarative_item ::=
    subprogram_declaration
    | subprogram_body
    | type_declaration
    | subtype_declaration
    | constant_declaration
    | variable_declaration
    | file_declaration
    | alias_declaration
    | attribute_declaration
    | attribute_specification
    | use_clause
    | group_template_declaration
    | group_declaration

subprogram_declarative_part ::= ( subprogram_declarative_item )+

subprogram_kind ::= 'procedure' | 'function'

subprogram_parameter_file_declaration ::= 'file' identifier_list ':' subtype_indication

subprogram_specification ::=
    'procedure' designator [ '(' procedure_parameter_list ')' ]
    | [ 'pure' | 'impure' ] 'function' designator [ '(' function_parameter_list ')' ]
        'return' type_mark
{
    methods=[getPresentation getIcon getType]
}

subtype_declaration ::= 'subtype' identifier 'is' subtype_indication ';'

subtype_indication ::= [ resolution_function ] type_mark [ constraint ]

private suffix ::=
    identifier
    | character_literal
    | operator_symbol
    | 'and' | 'or' | 'nand' | 'nor' | 'xor' | 'xnor'
    | 'all'

private target ::=
    refname ( '.' refname )*
    | aggregate

term ::= factor ( multiplying_operator factor )*

timeout_clause ::= 'for' expression

type_conversion ::= type_mark '(' expression ')'

private type_declaration ::=
    full_type_declaration
    | incomplete_type_declaration

type_definition ::=
    scalar_type_definition
    | composite_type_definition
    | access_type_definition
    | file_type_definition

private type_mark ::= refname

unconstrained_array_definition ::=
    'array' '(' index_subtype_definition ( ',' index_subtype_definition )* ')'
        'of' subtype_indication

use_clause ::= 'use' selected_name ( ',' selected_name )* ';'
{
    pin=1
}

variable_assignment_statement ::= [ label ':' ] target ':=' ( charcast | expression ) ';'
{
    pin=3
}

variable_declaration ::= [ 'shared' ] 'variable' identifier_list ':' subtype_indication [ ':=' expression ] ';'
{
    methods=[getPresentation getIcon getType]
    pin=2
}

wait_statement ::= [ label ':' ] 'wait' [ sensitivity_clause ] [ condition_clause ] [ timeout_clause ] ';'

waveform ::=
    waveform_element ( ',' waveform_element )*
    | 'unaffected'

waveform_element ::=
    expression [ 'after' expression ]
    | 'null' [ 'after' expression ]